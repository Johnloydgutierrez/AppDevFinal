{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      productName: '',\n      description: '',\n      category: '',\n      quantity: '',\n      categImage: '',\n      price: '',\n      itemId: null,\n      sid: ''\n    };\n  },\n  // methods: {\n  //   handleImageChange(event) {\n  //     this.categImage = event.target.files[0];\n  //   },\n\n  //   async save() {\n  //   try {\n  //       const formData = this.createFormData();\n\n  //       // Save operation\n  //       const response = await axios.post('save', formData, {\n  //           headers: {\n  //               'Content-Type': 'multipart/form-data',\n  //           },\n  //       });\n\n  //       console.log(response.data);\n\n  //       // Remove the current item from the table\n  //       if (this.itemId) {\n  //           this.info = this.info.filter(item => item.id !== this.itemId);\n  //       }\n\n  //       // Reset itemId after saving changes\n  //       this.itemId = null;\n\n  //       // Reset the form fields\n  //       this.resetForm();\n  //       this.isEditing = false;\n\n  //       // Emit an event to notify the parent component about the data update\n  //       this.$emit('data-saved');\n\n  //       // ... handle other responses or actions as needed\n  //   } catch (error) {\n  //       console.error(error);\n  //   }\n\n  methods: {\n    async save() {\n      try {\n        // Generate a unique categImage productName\n\n        // Create FormData object\n        const formData = new FormData();\n        formData.append('productName', this.productName);\n        formData.append('description', this.description);\n        formData.append('category', this.category);\n        formData.append('quantity', this.quantity);\n        formData.append('categImage', this.categImage);\n        formData.append('price', this.price);\n\n        // Save the room data to the database\n        const room = await axios.post(\"categsave\", formData);\n        console.log(\"Room saved successfully:\", room);\n\n        // Clear the form after successful submission\n        this.productName = \"\";\n        this.description = \"\";\n        this.category = \"\";\n        this.quantity = \"\";\n        this.categImage = \"\";\n        this.price = \"\";\n        this.$emit('data-saved');\n        this.getInfo(id);\n        console.log(productName, description, category, quantity, categImage);\n      } catch (error) {\n        console.error(\"Error saving room:\", error);\n        // You can display an error message to the user\n      }\n    },\n\n    handleImageUpload(event) {\n      this.categImage = event.target.files[0];\n    },\n    getBase64Image(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result.split(',')[1]);\n        reader.onerror = error => reject(error);\n        reader.readAsDataURL(file);\n      });\n    },\n    async updateI() {\n      try {\n        // console.log(this.itemId);\n        const formData = this.createFormData();\n        console.log(formData);\n        // Update operation\n        const response = await axios.post(`updateI/${this.sid}`, {\n          'productName': this.productName,\n          'description': this.description,\n          'category': this.category,\n          'quantity': this.quantity,\n          'categImage': this.categImage,\n          'price': this.price\n        }, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response.data);\n\n        // Reset the form fields\n        this.resetForm();\n        this.isEditing = false;\n\n        // Emit an event to notify the parent component about the data update\n        this.$emit('data-save');\n\n        // ... handle other responses or actions as needed\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    cancelEdit() {\n      this.resetForm();\n      this.isEditing = false;\n    },\n    editItem(info) {\n      // Clear the form fields and reset editing status\n      this.resetForm();\n      this.isEditing = false;\n    },\n    createFormData() {\n      const formData = new FormData();\n      // formData.append('id', this.id);\n      formData.append('productName', this.productName);\n      formData.append('description', this.description);\n      formData.append('category', this.category);\n      formData.append('quantity', this.quantity);\n      formData.append('categImage', this.categImage);\n      formData.append('price', this.price);\n      return formData;\n    },\n    resetForm() {\n      // Reset your form fields\n      this.productName = '';\n      this.description = '';\n      this.category = '';\n      this.model = '';\n      this.quantity = '';\n      this.categImage = '';\n      this.price = '';\n    }\n  }\n};","map":{"version":3,"names":["axios","data","productName","description","category","quantity","categImage","price","itemId","sid","methods","save","formData","FormData","append","room","post","console","log","$emit","getInfo","id","error","handleImageUpload","event","target","files","getBase64Image","file","Promise","resolve","reject","reader","FileReader","onload","result","split","onerror","readAsDataURL","updateI","createFormData","response","headers","resetForm","isEditing","cancelEdit","editItem","info","model"],"sources":["D:\\laragon\\www\\AppDevFinal\\src\\components\\categ.vue"],"sourcesContent":["<template>\r\n    <div class=\"sidebar bg-dark-blue text-light p-4\">\r\n        <h3>Add New Product</h3>\r\n        <form @submit.prevent=\"save\">\r\n          \r\n          <div class=\"mb-3\">\r\n            <label for=\"productName\" class=\"form-label\">ProductName</label>\r\n            \r\n            <input type=\"text\" class=\"form-control\" placeholder=\"productName\" v-model=\"productName\" required>\r\n          </div>\r\n          \r\n          <div class=\"mb-3\">\r\n            \r\n            <label for=\"description\" class=\"form-label\">description</label>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"description\" v-model=\"description\" required>\r\n          </div>\r\n    \r\n                \r\n          <div class=\"mb-3\">\r\n            <label for=\"category\" class=\"form-label\">category</label>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"category\" v-model=\"category\" required>\r\n          </div>\r\n\r\n          <div class=\"mb-3\">\r\n            <label for=\"quantity\" class=\"form-label\">quantity</label>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"quantity\" v-model=\"quantity\" required>\r\n          </div>\r\n\r\n          \r\n          <div class=\"mb-3\">\r\n            <label for=\"image\" class=\"form-label\">Image</label>\r\n            <input type=\"file\" id=\"image\" class=\"form-control\" @change=\"handleImageUpload\" required>\r\n          </div>\r\n                \r\n          <div class=\"mb-3\">\r\n            <label for=\"price\" class=\"form-label\">price</label>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"price\" v-model=\"price\" required>\r\n          </div>\r\n    \r\n          \r\n          <div style=\"display: flex; justify-content: space-between;\">\r\n      <button v-if=\"isEditing\" type=\"button\" @click=\"cancelEdit\" class=\"btn btn-secondary\">Cancel</button>\r\n      <button v-if=\"isEditing\" type=\"submit\" @click.prevent=\"updateI\" class=\"btn btn-danger\" style=\"margin-right: 150px;\">Update</button>\r\n      <button v-else type=\"submit\" @click.prevent=\"save\" class=\"btn btn-success\">Save</button>\r\n    </div>\r\n    \r\n        </form>\r\n      </div>\r\n    </template>\r\n    \r\n    <script>\r\n    import axios from 'axios';\r\n    \r\n    export default {\r\n      data() {\r\n        return {\r\n          productName: '',\r\n          description: '',\r\n          category: '',\r\n          quantity: '',\r\n          categImage: '',\r\n          price: '',\r\n          itemId: null,\r\n          sid: '',\r\n        };\r\n      },\r\n      // methods: {\r\n      //   handleImageChange(event) {\r\n      //     this.categImage = event.target.files[0];\r\n      //   },\r\n        \r\n      //   async save() {\r\n      //   try {\r\n      //       const formData = this.createFormData();\r\n    \r\n      //       // Save operation\r\n      //       const response = await axios.post('save', formData, {\r\n      //           headers: {\r\n      //               'Content-Type': 'multipart/form-data',\r\n      //           },\r\n      //       });\r\n    \r\n      //       console.log(response.data);\r\n    \r\n      //       // Remove the current item from the table\r\n      //       if (this.itemId) {\r\n      //           this.info = this.info.filter(item => item.id !== this.itemId);\r\n      //       }\r\n    \r\n      //       // Reset itemId after saving changes\r\n      //       this.itemId = null;\r\n    \r\n      //       // Reset the form fields\r\n      //       this.resetForm();\r\n      //       this.isEditing = false;\r\n    \r\n      //       // Emit an event to notify the parent component about the data update\r\n      //       this.$emit('data-saved');\r\n    \r\n      //       // ... handle other responses or actions as needed\r\n      //   } catch (error) {\r\n      //       console.error(error);\r\n      //   }\r\n      \r\n    \r\n      methods: {\r\n        async save() {\r\n              try {\r\n        // Generate a unique categImage productName\r\n    \r\n    \r\n        // Create FormData object\r\n        const formData = new FormData();\r\n        formData.append('productName', this.productName);\r\n        formData.append('description', this.description);\r\n        formData.append('category', this.category);\r\n        formData.append('quantity', this.quantity);\r\n        formData.append('categImage', this.categImage);\r\n        formData.append('price', this.price);\r\n    \r\n    \r\n        // Save the room data to the database\r\n        const room = await axios.post(\"categsave\", formData);\r\n    \r\n        console.log(\"Room saved successfully:\", room);\r\n    \r\n        // Clear the form after successful submission\r\n        this.productName = \"\";\r\n        this.description = \"\";\r\n        this.category = \"\";\r\n        this.quantity = \"\";\r\n        this.categImage = \"\";\r\n        this.price = \"\";\r\n    \r\n        this.$emit('data-saved');\r\n          this.getInfo(id);\r\n      console.log(productName,description,category,quantity,categImage,)\r\n      } catch (error) {\r\n        console.error(\"Error saving room:\", error);\r\n        // You can display an error message to the user\r\n      }\r\n    \r\n    },\r\n    \r\n      handleImageUpload(event) {\r\n          this.categImage = event.target.files[0];\r\n      },\r\n      getBase64Image(file) {\r\n          return new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.onload = () => resolve(reader.result.split(',')[1]);\r\n          reader.onerror = (error) => reject(error);\r\n          reader.readAsDataURL(file);\r\n        });\r\n      },\r\n    \r\n    \r\n    async updateI() {\r\n        try {\r\n          // console.log(this.itemId);\r\n            const formData = this.createFormData();\r\n            console.log(formData);\r\n            // Update operation\r\n            const response = await axios.post(`updateI/${this.sid}`,{\r\n              'productName': this.productName,\r\n              'description': this.description,\r\n              'category': this.category,\r\n              'quantity': this.quantity,\r\n              'categImage': this.categImage,\r\n              'price': this.price,\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                },\r\n            });\r\n    \r\n            console.log(response.data);\r\n    \r\n            // Reset the form fields\r\n            this.resetForm();\r\n            this.isEditing = false;\r\n    \r\n            // Emit an event to notify the parent component about the data update\r\n            this.$emit('data-save');\r\n    \r\n            // ... handle other responses or actions as needed\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    },\r\n    \r\n    cancelEdit() {\r\n          this.resetForm();\r\n          this.isEditing = false;\r\n        },\r\n    \r\n    \r\n        editItem(info) {\r\n          // Clear the form fields and reset editing status\r\n          this.resetForm();\r\n          this.isEditing = false;\r\n        },\r\n        createFormData() {\r\n          const formData = new FormData();\r\n          // formData.append('id', this.id);\r\n          formData.append('productName', this.productName);\r\n          formData.append('description', this.description);\r\n          formData.append('category', this.category);\r\n          formData.append('quantity', this.quantity);\r\n          formData.append('categImage', this.categImage);\r\n          formData.append('price', this.price);\r\n    \r\n          return formData;\r\n        },\r\n        resetForm() {\r\n          // Reset your form fields\r\n          this.productName = '';\r\n          this.description = '';\r\n          this.category = '';\r\n          this.model = '';\r\n          this.quantity = '';\r\n          this.categImage = '';\r\n          this.price = '';\r\n        },\r\n      },\r\n    };\r\n    </script>\r\n      \r\n      <style scoped>\r\n      .bg-dark-blue {\r\n      background-color: rgb(5, 22, 90)}\r\n      .sidebar {\r\n        height: 100%;\r\n      }\r\n      \r\n      @media (min-width: 768px) {\r\n        /* Adjust the height for larger screens */\r\n        .sidebar {\r\n          height: 80vh;\r\n        }\r\n      }\r\n      .sidebar h3 {\r\n        margin-bottom: 20px;\r\n      }\r\n      \r\n      .sidebar label {\r\n        margin-bottom: 5px;\r\n      }\r\n      \r\n      .sidebar input {\r\n        margin-bottom: 15px;\r\n      }\r\n      \r\n      .sidebar button {\r\n        margin-top: 10px;\r\n      }\r\n      .sidebar-container {\r\n      height: 0vh; /* 100% of the viewport height */\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n    \r\n    .sidebar {\r\n      height: 100%; /* Occupy full height of the container */\r\n    }\r\n      \r\n      </style>\r\n      "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}